---------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
Q1) Top 10 categories by number of customers served per employee 1

MongoDB->
db.sales_flat3.aggregate([
	{ "$match": { "Employee.EmployeeID": 1 } },
	{ "$group": {
		"_id": "$Product.CategoryName",
		"customers": { "$addToSet": "$Customer.CustomerID" }
	}},
	{ "$project": { "_id": 0, "category": "$_id", "distinct_customers": { "$size": "$customers" } } },
	{ "$sort": { "distinct_customers": -1, "category": 1 } },
	{ "$limit": 10 }
]),

PostgreSQL->
SELECT
ca.categoryname AS category,
COUNT(DISTINCT s.customerid) AS distinct_customers
FROM sales s
JOIN products   p  ON p.productid   = s.productid
JOIN categories ca ON ca.categoryid = p.categoryid
WHERE s.salespersonid = 1
GROUP BY ca.categoryname
ORDER BY distinct_customers DESC, category ASC
LIMIT 10;
---------------------------------------------------------------------------------------------------------------------------------
Q2) Top 10 cities by number of unique employees who sold in the Meat category

MongoDB->
db.sales_flat3.aggregate([
	{ "$match": { "Product.CategoryName": "Meat" } },
	{ "$group": {
		"_id": "$Customer.CityName",
		"employees": { "$addToSet": "$Employee.EmployeeID" }
	}},
	{ "$project": {
		"_id": 0,
		"city": "$_id",
		"distinct_employees": { "$size": "$employees" }
	}},
	{ "$sort": { "distinct_employees": -1, "city": 1 } },
	{ "$limit": 10 }
])

PostgreSQL->
SELECT
ci.cityname AS city,
COUNT(DISTINCT s.salespersonid) AS distinct_employees
FROM sales s
JOIN products   p  ON p.productid   = s.productid
JOIN categories ca ON ca.categoryid = p.categoryid
JOIN customers  cu ON cu.customerid = s.customerid
JOIN cities     ci ON ci.cityid     = cu.cityid
WHERE ca.categoryname = 'Meat'
GROUP BY ci.cityname
ORDER BY distinct_employees DESC, city ASC
LIMIT 10;
---------------------------------------------------------------------------------------------------------------------------------
Q3) Revenue per Product in Dallas

MongoDB->
db.sales_flat3.aggregate([
  { $match: { "Customer.CityName": "Dallas" } },
  { $group: {
      _id: "$Product.ProductName",
      revenue: { $sum: { $multiply: ["$Quantity", "$Product.Price", { $subtract: [1, "$Discount"] }] } }
  }},
  { $sort: { revenue: -1 } }
])

PostgreSQL->
SELECT
  p.productname AS product,
  ROUND(SUM(s.quantity * p.price * (1 - s.discount))::numeric, 2) AS revenue
FROM sales s
JOIN customers cu ON cu.customerid = s.customerid
JOIN cities ci     ON ci.cityid     = cu.cityid
JOIN products p    ON p.productid   = s.productid
WHERE ci.cityname = 'Dallas'
GROUP BY p.productname
ORDER BY revenue DESC;
---------------------------------------------------------------------------------------------------------------------------------
Q4) Price Distribution in the “Meat” Category

MongoDB->
db.sales_flat3.aggregate([
  { $match: { "Product.CategoryName": "Meat" } },
  { $bucket: {
      groupBy: "$Product.Price",
      boundaries: [0, 10, 20, 30, 40, 50, 1000],
      default: ">=1000",
      output: { count: { $sum: 1 } }
  }}
])

PostgreSQL->
SELECT bucket, COUNT(*) AS count
FROM (
  SELECT CASE
    WHEN p.price >= 0  AND p.price < 10   THEN '0-10'
    WHEN p.price >= 10 AND p.price < 20   THEN '10-20'
    WHEN p.price >= 20 AND p.price < 30   THEN '20-30'
    WHEN p.price >= 30 AND p.price < 40   THEN '30-40'
    WHEN p.price >= 40 AND p.price < 50   THEN '40-50'
    WHEN p.price >= 50 AND p.price < 1000 THEN '50-1000'
    ELSE '>=1000'
  END AS bucket
  FROM sales s
  JOIN products   p  ON p.productid   = s.productid
  JOIN categories ca ON ca.categoryid = p.categoryid
  WHERE ca.categoryname = 'Meat'
) t
GROUP BY bucket
ORDER BY CASE bucket
  WHEN '0-10' THEN 1 WHEN '10-20' THEN 2 WHEN '20-30' THEN 3
  WHEN '30-40' THEN 4 WHEN '40-50' THEN 5 WHEN '50-1000' THEN 6
  ELSE 7 END;
---------------------------------------------------------------------------------------------------------------------------------
Q5) Top 10 Customers in Tucson

MongoDB->
db.sales_flat3.aggregate([
  { $match: { "Customer.CityName": "Tucson" } },
  { $group: {
      _id: { id: "$Customer.CustomerID", first: "$Customer.FirstName", last: "$Customer.LastName" },
      purchases: { $sum: 1 },
      spend: { $sum: { $multiply: ["$Quantity", "$Product.Price", { $subtract: [1, "$Discount"] }] } }
  }},
  { $sort: { spend: -1 } },
  { $limit: 10 }
])

PostgreSQL->
SELECT
  cu.customerid AS customerid,
  cu.firstname  AS firstname,
  cu.lastname   AS lastname,
  COUNT(*)      AS purchases,
  ROUND(SUM(s.quantity * p.price * (1 - s.discount))::numeric, 2) AS spend
FROM sales s
JOIN customers cu ON cu.customerid = s.customerid
JOIN cities ci     ON ci.cityid     = cu.cityid
JOIN products p    ON p.productid   = s.productid
WHERE ci.cityname = 'Tucson'
GROUP BY cu.customerid, cu.firstname, cu.lastname
ORDER BY spend DESC
LIMIT 10;
---------------------------------------------------------------------------------------------------------------------------------
Q6) Least Sold Product in San Diego

MongoDB->
db.sales_flat3.aggregate([
  { $match: { "Customer.CityName": "San Diego" } },                                   
  { $group: {
      _id: "$Product.ProductName",
      qty: { $sum: "$Quantity" }
  }},
  { $sort: { qty: 1, _id: 1 } },                               
  { $limit: 1 },
  { $project: { _id: 0, City: "San Diego", Product: "$_id", QuantitySold: "$qty" } }
], { hint: { "Customer.CityName": 1, "Product.ProductName": 1 }, allowDiskUse: true })

PostgreSQL->
SELECT
  'San Diego' AS city,
  p.productname AS product,
  SUM(s.quantity) AS quantitysold
FROM sales s
JOIN customers cu ON cu.customerid = s.customerid
JOIN cities ci     ON ci.cityid     = cu.cityid
JOIN products p    ON p.productid   = s.productid
WHERE ci.cityname = 'San Diego'
GROUP BY p.productname
ORDER BY quantitysold ASC, product ASC
LIMIT 1;
---------------------------------------------------------------------------------------------------------------------------------
Q7) Top 10 Customers by Number of Distinct Products Purchased

MongoDB->
db.sales_flat3.aggregate([
  { $group: {
      _id: "$Customer.CustomerID",
      products: { $addToSet: "$Product.ProductID" },
      firstname: { $first: "$Customer.FirstName" },
      lastname:  { $first: "$Customer.LastName" }
  }},
  { $project: {
      customerid: "$_id",
      firstname: 1,
      lastname: 1,
      distinct_products: { $size: "$products" },
      _id: 0
  }},
  { $sort: { distinct_products: -1 } },
  { $limit: 10 }
])

PostgreSQL->
SELECT cu.customerid, cu.firstname, cu.lastname,
       COUNT(DISTINCT s.productid) AS distinct_products
FROM customers cu
JOIN sales s ON s.customerid = cu.customerid
GROUP BY cu.customerid, cu.firstname, cu.lastname
ORDER BY distinct_products DESC
LIMIT 10;
---------------------------------------------------------------------------------------------------------------------------------
Q8) Top 10 employees by total revenue in the Beverages category 

MongoDB->
db.sales_flat3.aggregate([
                { "$match": { "Product.CategoryName": "Beverages" } },
                { "$group": {
                    "_id": { "id": "$Employee.EmployeeID", "first": "$Employee.FirstName", "last": "$Employee.LastName" },
                    "revenue": { "$sum": { "$multiply": [ "$Quantity", "$Product.Price", { "$subtract": [1, "$Discount"] } ] } }
                }},
                { "$project": {
                    "_id": 0,
                    "EmployeeID": "$_id.id",
                    "FirstName": "$_id.first",
                    "LastName": "$_id.last",
                    "revenue": { "$round": ["$revenue", 2] }
                }},
                { "$sort": { "revenue": -1, "EmployeeID": 1 } },
                { "$limit": 10 }
            ])

PostgreSQL->
SELECT
e.employeeid,
e.firstname,
e.lastname,
ROUND(SUM(s.quantity * p.price * (1 - s.discount))::numeric, 2) AS revenue
FROM sales s
JOIN products   p  ON p.productid   = s.productid
JOIN categories ca ON ca.categoryid = p.categoryid
JOIN employees  e  ON e.employeeid  = s.salespersonid
WHERE ca.categoryname = 'Beverages'
GROUP BY e.employeeid, e.firstname, e.lastname
ORDER BY revenue DESC, e.employeeid
LIMIT 10;
---------------------------------------------------------------------------------------------------------------------------------
Q9) Top 10 employees by distinct products sold in Cereals category

MongoDB->
db.sales_flat3.aggregate([
  { $match: { "Product.CategoryName": "Cereals" } },
  { $group: {
      _id: { id: "$Employee.EmployeeID", first: "$Employee.FirstName", last: "$Employee.LastName" },
      products: { $addToSet: "$Product.ProductID" }
  }},
  { $project: {
      EmployeeID: "$_id.id", FirstName: "$_id.first", LastName: "$_id.last",
      distinct_products: { $size: "$products" }, _id: 0
  }},
  { $sort: { distinct_products: -1, EmployeeID: 1 } },
  { $limit: 10 }
])

PostgreSQL->
SELECT e.employeeid, e.firstname, e.lastname,
       COUNT(DISTINCT s.productid) AS distinct_products
FROM sales s
JOIN products   p  ON p.productid   = s.productid
JOIN categories ca ON ca.categoryid = p.categoryid
JOIN employees  e  ON e.employeeid  = s.salespersonid
WHERE ca.categoryname = 'Cereals'
GROUP BY e.employeeid, e.firstname, e.lastname
ORDER BY distinct_products DESC, e.employeeid
LIMIT 10;
---------------------------------------------------------------------------------------------------------------------------------
Q10) Total customer 1 spending by category (revenue) 

MongoDB->
db.sales_flat3.aggregate([
                { "$match": { "Customer.CustomerID": 1 } },
                { "$group": {
                    "_id": "$Product.CategoryName",
                    "revenue": { "$sum": { "$multiply": [ "$Quantity", "$Product.Price", { "$subtract": [1, "$Discount"] } ] } }
                }},
                { "$project": { "_id": 0, "category": "$_id", "revenue": { "$round": ["$revenue", 2] } } },
                { "$sort": { "revenue": -1, "category": 1 } }
            ])

PostgreSQL->
SELECT ca.categoryname AS category, ROUND(SUM(s.quantity * p.price * (1 - s.discount))::numeric, 2) AS revenue
FROM sales s
JOIN products   p  ON p.productid   = s.productid
JOIN categories ca ON ca.categoryid = p.categoryid
WHERE s.customerid = 1
GROUP BY ca.categoryname
ORDER BY revenue DESC, category ASC;
---------------------------------------------------------------------------------------------------------------------------------
Q11) Top 5 products purchased by the customer 1(by quantity)

MongoDB->
db.sales_flat3.aggregate([
                { "$match": { "Customer.CustomerID": 1 } },
                { "$group": { "_id": "$Product.ProductName", "qty": { "$sum": "$Quantity" } } },
                { "$sort": { "qty": -1, "_id": 1 } },
                { "$limit": 5 },
                { "$project": { "_id": 0, "product": "$_id", "quantity": "$qty" } }
            ])

PostgreSQL->
SELECT p.productname AS product, SUM(s.quantity) AS quantity
        FROM sales s
        JOIN products p ON p.productid = s.productid
        WHERE s.customerid = 1
        GROUP BY p.productname
        ORDER BY quantity DESC, product ASC
        LIMIT 5;
---------------------------------------------------------------------------------------------------------------------------------
Q12) Number of sales of Scampi Tail for each city

MongoDB->
db.sales_flat3.aggregate([
  { "$match": { "Product.ProductName": "Scampi Tail" } },
  { "$group": { "_id": "$Customer.CityName", "total": { "$sum": 1 } } },
  { "$project": { "city": "$_id", "total": 1, "_id": 0 } }
])

PostgreSQL->
select ci.cityname, count(*)
from products p join sales s on s.productid=p.productid join customers c on s.customerid=c.customerid join cities ci on c.cityid=ci.cityid  
where p.productname='Scampi Tail'
group by ci.cityname
---------------------------------------------------------------------------------------------------------------------------------
Q13) Total quantity of products belonging to a category sold in each city

MongoDB->
db.sales_flat3.aggregate([
 { "$group": {
	"_id": { "CategoryName": "$Product.CategoryName", "CityName": "$Customer.CityName" },
 	"total": { "$sum": "$Quantity" }
 }},
 { "$project": { "_id": 0, "city": "$_id.CityName", "category": "$_id.CategoryName", "total": 1 } },
 { "$sort": { "city": 1, "category": 1 } }
])

PostgreSQL->
select distinct ci.cityname, ca.categoryname , sum(s.quantity) unitssold
from categories ca join products p on ca.categoryid=p.categoryid join sales s on s.productid=p.productid join customers c on c.customerid=s.customerid
join cities ci on c.cityid=ci.cityid
group by ca.categoryname ,ci.cityname
order by ci.cityname
---------------------------------------------------------------------------------------------------------------------------------
Q14) Number of sales of products that cost less than 30.5$ for Baltimore

MongoDB->
db.sales_flat3.aggregate([ {"$match": {
                "$and":[{"Customer.CityName":"Baltimore"},{"Product.Price": { "$lte": 30.5 }}]
                }},
                
                {
                    "$group": {
                    "_id": "$Product.ProductName",
                    "count": { "$sum": 1 }
                    }
                },
                {
                    "$project": {
                    "res": "$_id",
                    "count": 1,
                    "_id": 0
                    }
                }
            ])

PostgreSQL->
select p.productname ,count(*)   
from sales s join products p on s.productid=p.productid join customers cu on cu.customerid=s.customerid
join cities c on c.cityid=cu.cityid
where p.price<=30.5 and c.cityname='Baltimore'
group by   p.productname
---------------------------------------------------------------------------------------------------------------------------------
Q15) Revenue made by employees for selling Kiwi or Beef

MongoDB->
db.sales_flat3.aggregate([ {"$match": {
                "$or":[{"Product.ProductName":"Beef Wellington"},{"Product.ProductName":"Kiwi"}]
                }},
                { "$group": {
                    "_id": {
                            "firstname": "$Employee.FirstName",
                        "lastname": "$Employee.LastName"
                    },
                        "total": {
                        "$sum": {
                        "$subtract": [
                            { "$multiply": [ "$Quantity", "$Product.Price" ] },
                            { "$multiply": [ "$Quantity", "$Product.Price", "$Discount" ] }
                        ]
                        }
                    }
                    }
                    }
                ,
                {
                    "$project": {
                    
                    "firstname": "$_id.firstname",
                    "lastname": "$_id.lastname",
                    "total": { "$ceil": "$total" },  
                    "_id": 0
                    }
                },
                {"$sort":{ "total":-1}}
            ])

PostgreSQL->
select  e.firstname,e.lastname ,sum(s.quantity*p.price -s.quantity*p.price*s.discount )  total
from cities c join employees e on c.cityid=e.cityid 
join sales s on e.employeeid=s.salespersonid 
join products p on p.productid=s.productid
where p.productname='Beef Wellington' or p.productname='Kiwi'
group by   e.firstname,e.lastname   
order by total desc 
---------------------------------------------------------------------------------------------------------------------------------
Q16) Customer and date when he/she bought more than 19 units of a Produce product

MongoDB->
db.sales_flat3.aggregate([
                {
                "$match": {                                                               
                    "$and":[{"Product.CategoryName": "Produce"},{"Quantity": {"$gte":20}}]
                }
                },
                
                {
                "$group": {
                    "_id": {
                    "CustomerName": "$Customer.FirstName",
                        "CustomerLastName":"$Customer.LastName",
                        "ProductName":"$Product.ProductName",
                        "Date":"$SalesDate"
                    }    
                }
                },
                { 
                "$project": {
                    "Name": "$_id.CustomerName",
                    "Surname": "$_id.CustomerLastName",
                    "product" :"$_id.ProductName" ,
                    "Date": "$_id.Date",
                    "_id": 0
                    }
                }
            ])

PostgreSQL->
select  cu.firstname,cu.lastname,p.productname,s.salesdate      
from customers cu join sales s on cu.customerid=s.customerid
join products p on s.productid=p.productid join categories ca on ca.categoryid=p.categoryid 
where s.quantity>=20 and ca.categoryname='Produce'
---------------------------------------------------------------------------------------------------------------------------------
Q17) Top 5 products (by number of sales) in Buffalo

MongoDB->
db.sales_flat3.aggregate([{
                "$match": {"Customer.CityName":"Buffalo" } },
                {
                "$group": { "_id": "$Product.ProductName", "total": { "$sum": 1 } 
                } 
                },
                {
                "$project": {"prod": "$_id", "total": 1, "_id": 0 } },
                {  
                    "$sort":{
                    "total":-1
                }
                },
                {
                    "$limit":5}
            ])

PostgreSQL->
select p.productname ,count (s.salesid)
from sales s join customers cu on s.customerid=cu.customerid 
join cities c on c.cityid=cu.cityid
join products p on p.productid=s.productid
where c.cityname='Buffalo'
group by p.productname 
order by count (s.salesid) desc
limit 5  
---------------------------------------------------------------------------------------------------------------------------------
Q18) Number of sales of each Dairy product for each city

MongoDB->
db.sales_flat3.aggregate([
                { "$match": { "Product.CategoryName": "Dairy" } },
                { "$group": { "_id": { "CityName": "$Customer.CityName", "ProductName": "$Product.ProductName" }, "total": { "$sum": 1 } } },
                { "$project": { "_id": 0, "city": "$_id.CityName", "product": "$_id.ProductName", "total": 1 } },
                { "$sort": { "city": 1, "product": 1 } }
            ])

PostgreSQL->
select c.cityname,p.productname,count(s.salesid)
from categories ca join products p on p.categoryid=ca.categoryid
join sales s on p.productid=s.productid
join customers cu on cu.customerid=s.customerid
join cities c on c.cityid=cu.cityid 
where ca.categoryname='Dairy' 
group by c.cityname,p.productname,ca.categoryname
order by count(s.salesid) desc
---------------------------------------------------------------------------------------------------------------------------------
Q19) Number of times an employee in Lincoln has served each customer

MongoDB->
db.sales_flat3.aggregate([
                { "$match": { "Customer.CityName": "Lincoln" } },
                { "$group": { "_id":{"EName":"$Employee.FirstName","ELastName":"$Employee.LastName",
                                "CName":"$Customer.FirstName","CLastName":"$Customer.LastName"}, "count": { "$sum": 1 } } },
                { "$project": {"EName": "$_id.EName","ELastName": "$_id.ELastName",
                            "CName": "$_id.CName","CLastName": "$_id.CLastName","count": 1, "_id": 0 } }
            ])

PostgreSQL->
select e.firstname,e.lastname,cu.firstname,cu.lastname,count(s.salesid)
from customers cu join sales s on s.customerid=cu.customerid join cities c on c.cityid=cu.cityid              
join employees e on e.employeeid=s.salespersonid
where c.cityname='Lincoln'
group by e.firstname,e.lastname,cu.firstname,cu.lastname
---------------------------------------------------------------------------------------------------------------------------------
Q20) Years of employment of each employee

MongoDB->
db.sales_flat3.aggregate([
                { "$group": {
                    "_id": { "Name": "$Employee.FirstName", "LastName": "$Employee.LastName" },
                    "year": { "$first": "$Employee.HireDate" }
                }},
                { "$project": {
                    "_id": 0,
                    "name": "$_id.Name",
                    "lastname": "$_id.LastName",
                    "years": {
                        "$dateDiff": {
                            "startDate": { "$toDate": "$year" },
                            "endDate": datetime(2018, 1, 1),
                            "unit": "year"
                        }
                    }
                }}
            ])

PostgreSQL->
select distinct e1.lastname,e1.firstname,2025-date_part('year', e1.hiredate) as years         
from employees e1 join cities c on c.cityid=e1.cityid  
group by e1.firstname,e1.lastname, years
---------------------------------------------------------------------------------------------------------------------------------
Q21) Category and total units sold for each product

MongoDB->
db.sales_flat3.aggregate([
                { "$group": { "_id":{"Category":"$Product.CategoryName","ProductName":"$Product.ProductName"}, "total": { "$sum": "$Quantity"} } },
                { "$project": { "category": "$_id.Category",
                                "product":"$_id.ProductName" ,
                                "total": 1,
                                "_id": 0 } },
                {"$sort":{"total":-1}} 
            ])

PostgreSQL->
select distinct ca.categoryname ,p.productname,sum(s.quantity)                                     
from categories ca join products p on p.categoryid=ca.categoryid
join  sales s on p.productid=s.productid 
join customers cu on s.customerid=cu.customerid
join cities c on c.cityid=cu.cityid
group by ca.categoryname ,p.productname
order by sum(s.quantity)

---------------------------------------------------------------------------------------------------------------------------------
Q22) Top 10 products by number of unique customers in New York

MongoDB->
db.sales_flat3.aggregate([
  { $match: { "Customer.CityName": "New York" } },
  { $group: {
      _id: "$Product.ProductName",
      customers: { $addToSet: "$Customer.CustomerID" }
  }},
  { $project: { _id: 0, product: "$_id", distinct_customers: { $size: "$customers" } } },
  { $sort: { distinct_customers: -1, product: 1 } },
  { $limit: 10 }
], { allowDiskUse: true })

PostgreSQL->
SELECT
  p.productname AS product,
  COUNT(DISTINCT s.customerid) AS distinct_customers
FROM sales s
JOIN customers cu ON cu.customerid = s.customerid
JOIN cities ci     ON ci.cityid     = cu.cityid
JOIN countries co  ON co.countryid  = ci.countryid
JOIN products p    ON p.productid   = s.productid
WHERE ci.cityname = 'New York'
GROUP BY p.productname
ORDER BY distinct_customers DESC, product ASC
LIMIT 10;


